// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto_vendor

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AppConnectClient is the client API for AppConnect service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AppConnectClient interface {
	// Only the first ActionOrContract will contain an action, all the rest will be contract data
	ExecuteAction(ctx context.Context, opts ...grpc.CallOption) (AppConnect_ExecuteActionClient, error)
}

type appConnectClient struct {
	cc grpc.ClientConnInterface
}

func NewAppConnectClient(cc grpc.ClientConnInterface) AppConnectClient {
	return &appConnectClient{cc}
}

func (c *appConnectClient) ExecuteAction(ctx context.Context, opts ...grpc.CallOption) (AppConnect_ExecuteActionClient, error) {
	stream, err := c.cc.NewStream(ctx, &AppConnect_ServiceDesc.Streams[0], "/appConnect.AppConnect/ExecuteAction", opts...)
	if err != nil {
		return nil, err
	}
	x := &appConnectExecuteActionClient{stream}
	return x, nil
}

type AppConnect_ExecuteActionClient interface {
	Send(*ActionOrContract) error
	Recv() (*ContractRequest, error)
	grpc.ClientStream
}

type appConnectExecuteActionClient struct {
	grpc.ClientStream
}

func (x *appConnectExecuteActionClient) Send(m *ActionOrContract) error {
	return x.ClientStream.SendMsg(m)
}

func (x *appConnectExecuteActionClient) Recv() (*ContractRequest, error) {
	m := new(ContractRequest)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// AppConnectServer is the server API for AppConnect service.
// All implementations must embed UnimplementedAppConnectServer
// for forward compatibility
type AppConnectServer interface {
	// Only the first ActionOrContract will contain an action, all the rest will be contract data
	ExecuteAction(AppConnect_ExecuteActionServer) error
	mustEmbedUnimplementedAppConnectServer()
}

// UnimplementedAppConnectServer must be embedded to have forward compatible implementations.
type UnimplementedAppConnectServer struct {
}

func (UnimplementedAppConnectServer) ExecuteAction(AppConnect_ExecuteActionServer) error {
	return status.Errorf(codes.Unimplemented, "method ExecuteAction not implemented")
}
func (UnimplementedAppConnectServer) mustEmbedUnimplementedAppConnectServer() {}

// UnsafeAppConnectServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AppConnectServer will
// result in compilation errors.
type UnsafeAppConnectServer interface {
	mustEmbedUnimplementedAppConnectServer()
}

func RegisterAppConnectServer(s grpc.ServiceRegistrar, srv AppConnectServer) {
	s.RegisterService(&AppConnect_ServiceDesc, srv)
}

func _AppConnect_ExecuteAction_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(AppConnectServer).ExecuteAction(&appConnectExecuteActionServer{stream})
}

type AppConnect_ExecuteActionServer interface {
	Send(*ContractRequest) error
	Recv() (*ActionOrContract, error)
	grpc.ServerStream
}

type appConnectExecuteActionServer struct {
	grpc.ServerStream
}

func (x *appConnectExecuteActionServer) Send(m *ContractRequest) error {
	return x.ServerStream.SendMsg(m)
}

func (x *appConnectExecuteActionServer) Recv() (*ActionOrContract, error) {
	m := new(ActionOrContract)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// AppConnect_ServiceDesc is the grpc.ServiceDesc for AppConnect service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AppConnect_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "appConnect.AppConnect",
	HandlerType: (*AppConnectServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ExecuteAction",
			Handler:       _AppConnect_ExecuteAction_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "xAction.proto",
}
